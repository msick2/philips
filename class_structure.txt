

ConnectIndication ::=
    Nomenclature
    ROapdus
        ro_type := ROIVapdu
    ROIVapdu
        command_type := CMD_EVENT_REPORT

    EventReportArgument
        managed_object:={NOM_MOC_MDS_COMPOS_SINGLE_BED,0,0},
        event_type := NOM_NOTI_MDS_CONNECT_INDIC
    ConnectIndInfo

---------------------------------------------------------------------

MDSCreateEventReport ::=
    SPpdu
    ROapdus
        ro_type := ROIV_APDU
    ROIVapdu
        command_type := CMD_CONFIRMED_EVENT_REPORT

    EventReportArgument
        event_type := NOM_NOTI_MDS_CREAT
    MDSCreateInfo


MDSCreateEventReport ::=
    SPpdu
    ROapdus
        ro_type := ROIV_APDU
    ROIVapdu
        command_type := CMD_CONFIRMED_EVENT_REPORT

    EventReportArgument
        managed_object := {NOM_MOC_VMS_MDS, 0, 0},
        event_type := NOM_NOTI_MDS_CREAT
    MDSCreateInfo


---------------------------------------------------------------------


MDSPollAction ::=
    SPpdu
    ROapdus
        ro_type := ROIV_APDU
    ROIVapdu
        command_type := CMD_CONFIRMED_ACTION

    ActionArgument
        managed_object := {NOM_MOC_VMS_MDS, 0, 0},
        action_type := NOM_ACT_POLL_MDIB_DATA
    PollMdibDataReq


-----------------------------


MDSPollAction ::=
    SPpdu
    ROapdus
        ro_type := ROIV_APDU
    ROIVapdu
        command_type := CMD_CONFIRMED_ACTION

    ActionArgument
        managed_object := {NOM_MOC_VMS_MDS, 0, 0},
        action_type := NOM_ACT_POLL_MDIB_DATA_EXT
    PollMdibDataReqExt


---------------------------------------------------------------------


MDSGetPriorityList ::=
    SPpdu
    ROapdus
        ro_type := ROIV_APDU
    ROIVapdu
        command_type := CMD_GET

    GetArgument
        managed_object := {NOM_MOC_VMS_MDS, 0, 0}


---------------------------------------------------------------------


MDSSetPriorityList ::=
    SPpdu
    ROapdus
        ro_type := ROIV_APDU
    ROIVapdu
        command_type := CMD_CONFIRMED_SET

    SetArgument
        managed_object := {NOM_MOC_VMS_MDS, 0, 0}



==========================================================================================

MDSCreateEventResult ::=
    SPpdu
    ROapdus
        ro_type := RORS_APDU
    RORSapdu
        invoke_id := mirrored from event report,
        command_type := CMD_CONFIRMED_EVENT_REPORT

    EventReportResult
        managed_object := mirrored from event report,
        event_type := NOM_NOTI_MDS_CREAT
        length := 0 


---------------------------------------------------------------------


MDSPollActionResult ::=
    SPpdu
    ROapdus
        ro_type := RORS_APDU
    RORSapdu
        invoke_id := "mirrored from request message"
        command_type := CMD_CONFIRMED_ACTION

    ActionResult
        managed_object := {NOM_MOC_VMS_MDS, 0, 0},
        action_type := NOM_ACT_POLL_MDIB_DATA
    PollMdibDataReply

-----------------------------

MDSPollActionResultExt ::=
    SPpdu
    ROapdus
        ro_type := RORS_APDU
    RORSapdu
        invoke_id := "mirrored from request message"
        command_type := CMD_CONFIRMED_ACTION

    ActionResult
        managed_object := {NOM_MOC_VMS_MDS, 0, 0},
        action_type := NOM_ACT_POLL_MDIB_DATA_EXT
    PollMdibDataReplyExt


---------------------------------------------------------------------


MDSGetPriorityListResult ::=
    SPpdu
    ROapdus
        ro_type := RORS_APDU
    RORSapdu
        invoke_id := “mirrored from request message”,
        command_type := CMD_GET

    GetResult
        managed_object := {NOM_MOC_VMS_MDS, 0, 0}


---------------------------------------------------------------------


MDSSetPriorityListResult ::=
    SPpdu
    ROapdus
        ro_type := RORS_APDU
    RORSapdu
        invoke_id := “mirrored from request message”,
        command_type := CMD_CONFIRMED_SET

    SetResult
        managed_object := {NOM_MOC_VMS_MDS, 0, 0}


---------------------------------------------------------------------




The Association Request message is sent from the Computer Client to the monitor when it wants to
establish a new association. The AssocReqUserData contains information about the requested protocol
and protocol options.
AssociationRequestMessage ::=
AssocReqSessionHeader
AssocReqSessionData
AssocReqPresentationHeader
AssocReqUserData
AssorReqPresentationTrailer

The Association Response message is sent by the monitor if an Association Request message was parsed
successfully and the association is accepted.
AssociationResponseMessage ::=
AssocRespSessionHeader
AssocRespSessionData
AssocRespPresentationHeader
AssocRespUserData
AssorRespPresentationTrailer

If the Association Request message is corrupt, or if the association cannot be accepted e.g. there is
already another association, the monitor sends a Refuse message.
RefuseMessage ::=
RefuseSessionHeader
RefuseSessionData
RefusePresentationData
RefuseUserData
RefusePresentationTrailer

When the Computer Client wants to terminate an association, it can send a Release Request message.
ReleaseRequestMessage ::=
ReleaseReqSessionHeader
ReleaseReqSessionData
ReleaseReqPresentationHeader
ReleaseReqUserData
ReleaseReqPresentationTrailer

When the monitor receives a Release Request message, it sends a Release Response message as
confirmation. The Release Response message indicates that the association has been terminated.
ReleaseRespMessage ::=
ReleaseRespSessionHeader
ReleaseRespSessionData
ReleaseRespPresentationHeader
ReleaseRespUserData
ReleaseRespPresentationTrailer

The Abort message terminates an association without further confirmation. For example, the monitor
sends an Abort message if an association is timed out no communication from the Computer Client.
AbortMessage ::=
AbortSessionHeader
AbortSessionData
AbortPresentationHeader
AbortUserData
AbortPresentationTrailer



The Session Header of the Association Request Message is defined as follows:
AssocReqSessionHeader ::=
SessionHead type := CN_SPDU_SI


The User Data contains a specification of the requested protocol and protocol options. It is defined as
follows:
AssocReqUserData ::=
ASNLength
MDSEUserInfoStd



The Association Response message is identified by its Session Header:
AssocRespSessionHeader ::=
SessionHead type := AC_SPDU_SI



The User Data is defined as follows;
AssocRespUserData ::=
ASNLength
MDSEUserInfoStd



The Refuse messages is identified by its Session Header:
RefuseSessionHeader ::=
SessionHead type := RF_SPDU_SI


It is sufficient to check the Session Header to detect a Release Response message. The Session Header is
defined as follows:
ReleaseRespSessionHeader ::=
SessionHead type := DN_SPDU_SI




